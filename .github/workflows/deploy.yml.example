name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ca-central-1
  PROJECT_NAME: freelancer-data-stack

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push ingestion image
      uses: docker/build-push-action@v5
      with:
        context: ./ingestion
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-ingestion-prod:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-ingestion-prod:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push transformation image
      uses: docker/build-push-action@v5
      with:
        context: ./transformation
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-transformation-prod:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-transformation-prod:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push orchestration image
      uses: docker/build-push-action@v5
      with:
        context: ./orchestration
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-orchestration-prod:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-orchestration-prod:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-api-prod:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}-api-prod:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update ECS services
      run: |
        # Update ingestion service
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --service ${{ env.PROJECT_NAME }}-ingestion-prod \
          --force-new-deployment

        # Update transformation service
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --service ${{ env.PROJECT_NAME }}-transformation-prod \
          --force-new-deployment

        # Update orchestration service
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --service ${{ env.PROJECT_NAME }}-orchestration-prod \
          --force-new-deployment

        # Update API service
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --service ${{ env.PROJECT_NAME }}-api-prod \
          --force-new-deployment

    - name: Wait for deployments to complete
      run: |
        # Wait for services to stabilize
        aws ecs wait services-stable \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --services \
            ${{ env.PROJECT_NAME }}-ingestion-prod \
            ${{ env.PROJECT_NAME }}-transformation-prod \
            ${{ env.PROJECT_NAME }}-orchestration-prod \
            ${{ env.PROJECT_NAME }}-api-prod

    - name: Verify deployment
      run: |
        # Get service status
        aws ecs describe-services \
          --cluster ${{ env.PROJECT_NAME }}-prod \
          --services \
            ${{ env.PROJECT_NAME }}-ingestion-prod \
            ${{ env.PROJECT_NAME }}-transformation-prod \
            ${{ env.PROJECT_NAME }}-orchestration-prod \
            ${{ env.PROJECT_NAME }}-api-prod \
          --query 'services[*].[serviceName,runningCount,desiredCount]' \
          --output table

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActionsTerraformPlan

    - name: Terraform Init
      working-directory: infra/terraform
      run: |
        cp environments/prod/backend.tf .
        terraform init

    - name: Terraform Plan
      working-directory: infra/terraform
      run: |
        terraform plan \
          -var-file="environments/prod/terraform.tfvars" \
          -out=tfplan

    - name: Comment PR with plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infra/terraform/tfplan.txt', 'utf8');
          
          const output = `## Terraform Plan
          
          \`\`\`
          ${plan}
          \`\`\`
          
          *Plan generated for commit: ${context.sha}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActionsTerraformApply

    - name: Terraform Init
      working-directory: infra/terraform
      run: |
        cp environments/prod/backend.tf .
        terraform init

    - name: Terraform Apply
      working-directory: infra/terraform
      run: |
        terraform apply \
          -var-file="environments/prod/terraform.tfvars" \
          -auto-approve
