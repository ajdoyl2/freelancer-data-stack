name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infra.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infra.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.6
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

permissions:
  id-token: write   # Required for OIDC
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-check:
    name: Terraform Format and Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infra

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    environment: ${{ github.event.inputs.environment || 'dev' }}

    outputs:
      plan-cache-key: ${{ steps.plan-cache.outputs.cache-hit }}
      tfplan-exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-TerraformPlan
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Cache Terraform plugins
      uses: actions/cache@v3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('infra/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=data-stack/${{ env.TF_VAR_environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
      working-directory: ./infra

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ env.TF_VAR_environment }}.tfvars" \
          -out=tfplan \
          -detailed-exitcode
      working-directory: ./infra
      continue-on-error: true

    - name: Cache Terraform Plan
      id: plan-cache
      uses: actions/cache@v3
      with:
        path: infra/tfplan
        key: tfplan-${{ github.sha }}-${{ env.TF_VAR_environment }}

    - name: Generate Plan Summary
      run: |
        terraform show -json tfplan > plan.json
        terraform show -no-color tfplan > plan.txt
      working-directory: ./infra

    - name: Upload Plan Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ env.TF_VAR_environment }}
        path: |
          infra/plan.json
          infra/plan.txt
        retention-days: 30

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './infra/plan.txt';

          if (fs.existsSync(path)) {
            const plan = fs.readFileSync(path, 'utf8');
            const truncatedPlan = plan.length > 65000 ?
              plan.substring(0, 65000) + '\n... (truncated)' : plan;

            const body = `## Terraform Plan - ${{ env.TF_VAR_environment }}

          <details>
          <summary>Show Plan</summary>

          \`\`\`terraform
          ${truncatedPlan}
          \`\`\`
          </details>

          **Plan Exit Code**: ${{ steps.plan.outputs.exitcode }}
          - 0 = No changes
          - 1 = Error
          - 2 = Changes present
          `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

    - name: Check Plan Status
      run: |
        case "${{ steps.plan.outputs.exitcode }}" in
          0)
            echo "✅ No changes detected"
            ;;
          1)
            echo "❌ Terraform plan failed"
            exit 1
            ;;
          2)
            echo "📋 Changes detected in plan"
            ;;
          *)
            echo "❓ Unexpected exit code: ${{ steps.plan.outputs.exitcode }}"
            exit 1
            ;;
        esac

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: |
      (github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplan-exitcode == '2') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-TerraformApply
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Restore Cached Terraform Plan
      uses: actions/cache@v3
      with:
        path: infra/tfplan
        key: tfplan-${{ github.sha }}-${{ env.TF_VAR_environment }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=data-stack/${{ env.TF_VAR_environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./infra

    - name: Generate Apply Summary
      run: |
        terraform output -json > outputs.json || echo "{}" > outputs.json
        terraform show -json > state.json
      working-directory: ./infra

    - name: Upload Apply Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-apply-${{ env.TF_VAR_environment }}
        path: |
          infra/outputs.json
          infra/state.json
        retention-days: 90

    - name: Comment Apply Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const outputsPath = './infra/outputs.json';

          let outputs = "No outputs available";
          if (fs.existsSync(outputsPath)) {
            const outputsRaw = fs.readFileSync(outputsPath, 'utf8');
            const outputsJson = JSON.parse(outputsRaw);
            outputs = JSON.stringify(outputsJson, null, 2);
          }

          const body = `## Terraform Apply Complete - ${{ env.TF_VAR_environment }}

          ✅ Infrastructure deployment successful!

          <details>
          <summary>Terraform Outputs</summary>

          \`\`\`json
          ${outputs}
          \`\`\`
          </details>
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-TerraformDestroy
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=data-stack/${{ env.TF_VAR_environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
      working-directory: ./infra

    - name: Terraform Destroy Plan
      run: |
        terraform plan -destroy \
          -var-file="environments/${{ env.TF_VAR_environment }}.tfvars" \
          -out=destroy-plan
      working-directory: ./infra

    - name: Manual Approval for Destroy
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        issue-title: "Approve Terraform Destroy for ${{ env.TF_VAR_environment }}"
        issue-body: |
          Please review and approve the destruction of infrastructure for environment: **${{ env.TF_VAR_environment }}**

          **⚠️ WARNING: This action is irreversible!**

          Triggered by: @${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_id }}

    - name: Terraform Destroy
      run: terraform apply -auto-approve destroy-plan
      working-directory: ./infra

  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    environment: prod

    strategy:
      matrix:
        environment: [dev, staging, prod]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-DriftDetection
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=data-stack/${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"
      working-directory: ./infra

    - name: Terraform Plan (Drift Detection)
      id: drift
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}.tfvars" \
          -detailed-exitcode
      working-directory: ./infra
      continue-on-error: true

    - name: Create Drift Issue
      if: steps.drift.outputs.exitcode == '2'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Infrastructure Drift Detected - ${{ matrix.environment }}`;
          const body = `
          Infrastructure drift has been detected in the **${{ matrix.environment }}** environment.

          **Environment**: ${{ matrix.environment }}
          **Detection Time**: ${{ steps.drift.outputs.timestamp }}
          **Workflow Run**: ${{ github.run_id }}

          Please review the infrastructure and apply necessary changes:
          1. Review the Terraform plan in the workflow logs
          2. Determine if changes are expected or represent drift
          3. Apply corrections via infrastructure code updates
          4. Run the infrastructure deployment workflow

          **Actions Required**:
          - [ ] Review drift details
          - [ ] Update infrastructure code if needed
          - [ ] Deploy corrected infrastructure
          - [ ] Close this issue
          `;

          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'infrastructure,drift'
          });

          const existingIssue = issues.data.find(issue =>
            issue.title.includes(`Infrastructure Drift Detected - ${{ matrix.environment }}`)
          );

          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'drift', 'priority-high', '${{ matrix.environment }}']
            });
          }

  security-compliance:
    name: Security and Compliance Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./infra
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ./infra
        format: sarif
        soft_fail: true

    - name: Upload TFSec results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec-results.sarif

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-CostEstimation
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./infra

    - name: Generate Cost Estimation with Infracost
      uses: infracost/infracost-gh-action@v0.16
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
        path: ./infra
        terraform_plan_flags: -var-file="environments/dev.tfvars"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-apply]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify Success
      if: needs.terraform-apply.result == 'success'
      run: |
        echo "✅ Infrastructure deployment completed successfully"
        echo "🏗️ Environment: ${{ env.TF_VAR_environment }}"
        echo "🚀 Ready for application deployment"

    - name: Notify Failure
      if: needs.terraform-plan.result == 'failure' || needs.terraform-apply.result == 'failure'
      run: |
        echo "❌ Infrastructure deployment failed"
        echo "Please check the workflow logs for details"
        exit 1
