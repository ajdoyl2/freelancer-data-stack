[tool.poetry]
name = "freelancer-data-stack"
version = "0.1.0"
description = "Freelancer Data Stack Project"
authors = ["Data Team"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
# Core data transformation tools - Latest compatible versions
dbt-core = "^1.10.0"  # Latest dbt core version
dbt-duckdb = "^1.9.4"  # Latest dbt-duckdb adapter

[tool.poetry.group.dev.dependencies]
# Code quality and formatting tools - updated to latest stable versions
ruff = "^0.12.1"  # Fast Python linter and formatter - latest stable
black = "^25.1.0"  # Code formatter - latest stable
isort = "^5.13.0"
sqlfluff = "^3.0.0"
pre-commit = "^4.0.0"

# Note: Airflow temporarily removed due to SQLAlchemy compatibility conflicts with Meltano
# Meltano provides built-in orchestration capabilities via schedules and environments
# Can be re-added later when compatibility is resolved

[tool.poetry.group.jupyter.dependencies]
jupyter = "^1.1.0"
jupyterlab = "^4.3.0"

[tool.poetry.group.datahub.dependencies]
acryl-datahub = "^0.15.0"

# MCP Server dependencies - migrated from mcp-server/requirements.txt
[tool.poetry.group.server.dependencies]
# FastAPI web framework and ASGI server
fastapi = "^0.115.0"  # Web framework for building APIs
uvicorn = { extras = ["standard"], version = "^0.24.0" }  # ASGI server with standard extras
websockets = "^12.0.0"  # WebSocket support

# GraphQL support
strawberry-graphql = { extras = ["fastapi"], version = "^0.275.0" }

# Database drivers and ORM
snowflake-connector-python = { extras = ["pandas"], version = "^3.15.0" }
duckdb = "^1.3.1"  # Latest DuckDB version
sqlalchemy = { extras = ["asyncio"], version = "^2.0.0" }  # SQL toolkit with async support

# AI Agent Framework - Pydantic AI for type-safe agent development
pydantic-ai = "^0.0.9"  # Modern AI agent framework
anthropic = "^0.39.0"  # Anthropic Claude integration
openai = "^1.6.0"  # OpenAI API client

# Legacy LLM integration (will be replaced by Pydantic AI)
langchain = "^0.3.0"  # LLM application framework
langchain-openai = "^0.2.0"  # OpenAI integration for LangChain
qdrant-client = "^1.9.1"  # Vector store client

# Authentication and security
pydantic = "^2.0.0"  # Data validation using Python type hints
python-multipart = "^0.0.7"  # Multipart form data parsing
python-jose = { extras = ["cryptography"], version = "^3.3.0" }  # JWT handling
passlib = { extras = ["bcrypt"], version = "^1.7.0" }  # Password hashing
python-dotenv = "^1.0.0"  # Environment variable loading
httpx = "^0.28.0"  # Async HTTP client

# Monitoring and logging
prometheus-client = "^0.19.0"  # Prometheus metrics client
structlog = "^25.1.0"  # Structured logging (compatible with latest Meltano)

# Streamlit visualization dependencies - migrated from viz/streamlit/requirements.txt
[tool.poetry.group.viz.dependencies]
# Data visualization and dashboard framework
streamlit = "^1.46.0"  # Interactive web apps for data science
pandas = "^2.3.0"  # Data manipulation and analysis
plotly = "^6.2.0"  # Interactive plotting library
# Database connections (shared with server group but needed for viz)
psycopg2-binary = "^2.9.0"  # PostgreSQL adapter

[tool.poetry.group.meltano.dependencies]
# Meltano ELT platform - Latest version with built-in orchestration
meltano = "^3.7.9"  # Latest Meltano version
singer-sdk = "^0.40.0"  # Latest Singer SDK


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.sqlfluff.core]
dialect = "postgres"
max_line_length = 88

[tool.sqlfluff.rules]
max_line_length = 88
