#!/bin/bash
# AI Agent Workflow Functions for Warp Terminal
# Source this file: source .warp/agent_functions.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Agent Development Session
agent_dev_session() {
    echo -e "${CYAN}🤖 Starting AI Agent Development Session${NC}"
    echo -e "${BLUE}📍 Current Project:${NC} $(basename $(pwd))"
    echo -e "${BLUE}🌿 Current Branch:${NC} $(git branch --show-current)"
    echo -e "${BLUE}📊 Git Status:${NC}"
    git status --porcelain
    echo ""
    echo -e "${YELLOW}🔧 Environment Setup:${NC}"
    export PYTHONPATH="${PYTHONPATH}:$(pwd)"
    echo -e "${GREEN}✅ PYTHONPATH configured${NC}"
    echo -e "${BLUE}📦 Poetry Environment:${NC}"
    poetry env info
    echo ""
    echo -e "${YELLOW}🚀 Services Status:${NC}"
    docker-compose ps
    echo ""
    echo -e "${GREEN}🎯 Agent Development Session Ready!${NC}"
    echo -e "${PURPLE}💡 Available commands: agent_test, agent_deploy, agent_clean${NC}"
}

# Quick Test Suite
agent_test() {
    echo -e "${CYAN}🧪 Running Agent Test Suite${NC}"
    echo -e "${YELLOW}🔧 Installing dependencies...${NC}"
    poetry install --with dev --quiet
    
    echo -e "${YELLOW}✨ Code quality checks...${NC}"
    poetry run ruff check . --fix
    poetry run black . --check || poetry run black .
    poetry run isort . --check-only || poetry run isort .
    
    echo -e "${YELLOW}🧪 Running tests...${NC}"
    poetry run pytest tests/ -v --tb=short
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ All tests passed!${NC}"
    else
        echo -e "${RED}❌ Some tests failed${NC}"
    fi
}

# Development Environment Setup
agent_env_setup() {
    echo -e "${CYAN}🔧 Setting up development environment${NC}"
    
    # Install dependencies
    poetry install --with dev,dagster,viz,server
    
    # Create directories
    mkdir -p data/raw data/processed data/output
    mkdir -p logs reports
    
    # Start services
    echo -e "${YELLOW}🚀 Starting services...${NC}"
    docker-compose up -d postgres redis
    sleep 5
    
    # Check health
    agent_health_check
    
    echo -e "${GREEN}✅ Development environment ready!${NC}"
}

# Health Check
agent_health_check() {
    echo -e "${CYAN}🩺 Checking service health${NC}"
    
    echo -e "${BLUE}📦 Docker services:${NC}"
    docker-compose ps
    
    echo -e "${BLUE}🐘 PostgreSQL:${NC}"
    poetry run python -c "
import psycopg2
try:
    conn = psycopg2.connect('postgresql://user:password@localhost:5432/freelancer_db')
    print('✅ Connected')
    conn.close()
except Exception as e:
    print(f'❌ Failed: {e}')
" 2>/dev/null
    
    echo -e "${BLUE}🔴 Redis:${NC}"
    poetry run python -c "
import redis
try:
    r = redis.Redis(host='localhost', port=6379, db=0)
    r.ping()
    print('✅ Connected')
except Exception as e:
    print(f'❌ Failed: {e}')
" 2>/dev/null
}

# Quick PR Creation
agent_pr() {
    local branch_name="${1:-agent/auto-$(date +%Y%m%d-%H%M%S)}"
    local commit_msg="${2:-feat: AI agent automated improvements}"
    
    echo -e "${CYAN}🌿 Creating feature branch: ${branch_name}${NC}"
    git checkout -b "$branch_name"
    
    echo -e "${YELLOW}💾 Committing changes...${NC}"
    git add .
    git commit -m "$commit_msg

- Applied code quality improvements
- Updated dependencies and configurations
- Enhanced documentation and testing

Generated by: AI Agent $(date '+%Y-%m-%d %H:%M:%S')"
    
    echo -e "${YELLOW}🔍 Running pre-PR checks...${NC}"
    poetry run ruff check . --fix
    poetry run pytest tests/ -x --tb=short
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Pre-PR checks passed${NC}"
        echo -e "${YELLOW}📝 Creating PR...${NC}"
        gh pr create --title "AI Agent: $commit_msg" --body "## 🤖 AI Agent Automated Changes

This PR contains automated improvements generated by AI agents.

### Changes Made
- Code quality improvements and linting fixes
- Dependency updates and security patches
- Documentation enhancements
- Test coverage improvements

### Validation
- ✅ All tests passing
- ✅ Code quality checks passed
- ✅ Automated generation verified

Generated: $(date '+%Y-%m-%d %H:%M:%S')
Branch: $branch_name" --assignee @me
        
        echo -e "${GREEN}✅ PR created successfully!${NC}"
    else
        echo -e "${RED}❌ Pre-PR checks failed. Fix issues first.${NC}"
    fi
}

# Cleanup
agent_clean() {
    echo -e "${CYAN}🧹 Starting cleanup${NC}"
    
    # Python cache
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    echo -e "${GREEN}✅ Python cache cleaned${NC}"
    
    # Poetry cache
    poetry cache clear --all pypi --quiet
    echo -e "${GREEN}✅ Poetry cache cleaned${NC}"
    
    # Docker cleanup
    docker system prune -f --volumes
    echo -e "${GREEN}✅ Docker cleanup completed${NC}"
    
    echo -e "${GREEN}🎯 Cleanup completed!${NC}"
}

# Quick aliases
alias ads='agent_dev_session'
alias atest='agent_test'
alias aenv='agent_env_setup'
alias ahealth='agent_health_check'
alias apr='agent_pr'
alias aclean='agent_clean'

# Quick shortcuts
alias qi='poetry install --with dev'
alias qt='poetry run pytest tests/ -v --tb=short'
alias qf='poetry run ruff check . --fix && poetry run black . && poetry run isort .'
alias qs='docker-compose up -d postgres redis'
alias qd='docker-compose down'

# Prompt library functions
prompt_view() {
    local category="$1"
    local prompt_name="$2"
    if [[ -z "$category" || -z "$prompt_name" ]]; then
        echo "Usage: prompt_view <category> <prompt_name>"
        echo "Categories: coding, data, debugging, testing, deployment, documentation, architecture, analysis"
        return 1
    fi
    cat "prompts/$category/$prompt_name.md"
}

prompt_search() {
    local keyword="$1"
    if [[ -z "$keyword" ]]; then
        echo "Usage: prompt_search <keyword>"
        return 1
    fi
    grep -r "$keyword" prompts/ --include='*.md'
}

prompt_list() {
    local category="$1"
    if [[ -z "$category" ]]; then
        echo "Usage: prompt_list <category>"
        echo "Categories: coding, data, debugging, testing, deployment, documentation, architecture, analysis"
        return 1
    fi
    ls prompts/$category/*.md 2>/dev/null || echo "No prompts found in category: $category"
}

prompt_help() {
    echo -e "${CYAN}🎯 AI Agent Prompt Library Help${NC}"
    echo ""
    echo -e "${BLUE}📚 Quick Access:${NC}"
    echo "  prompt_view <category> <name> - View specific prompt"
    echo "  prompt_search <keyword>       - Search all prompts"
    echo "  prompt_list <category>        - List category prompts"
    echo ""
    echo -e "${BLUE}🔥 Popular Prompts:${NC}"
    echo "  code_review        - Comprehensive code review"
    echo "  pipeline_design    - Data pipeline architecture"
    echo "  debug_error        - Error analysis and resolution"
    echo "  production_issue   - Emergency troubleshooting"
    echo ""
    echo -e "${BLUE}🚀 Workflows:${NC}"
    echo "  new_feature_workflow    - Complete feature development"
    echo "  data_pipeline_workflow  - Complete pipeline development"
    echo "  debug_workflow          - Emergency debugging process"
    echo ""
    echo -e "${BLUE}📖 Documentation:${NC} cat prompts/README.md"
}

# Prompt aliases
alias pv='prompt_view'
alias ps='prompt_search'
alias pl='prompt_list'
alias ph='prompt_help'
alias cr='cat prompts/coding/code_review.md'
alias pd='cat prompts/data/pipeline_design.md'

# Warp workflow management
warp_import_workflows() {
    echo -e "${CYAN}📱 Importing AI workflows to Warp...${NC}"
    python3 .warp/import_workflows.py
    echo -e "${YELLOW}💡 Open Warp and press Cmd+P to access your workflows!${NC}"
}

warp_list_workflows() {
    echo -e "${CYAN}📋 Available AI Workflows in Warp:${NC}"
    echo -e "${BLUE}• AI Code Review${NC} - Comprehensive code analysis"
    echo -e "${BLUE}• Data Pipeline Design${NC} - Architecture planning"
    echo -e "${BLUE}• AI Debug Assistant${NC} - Systematic troubleshooting"
    echo -e "${BLUE}• Production Issue Triage${NC} - Emergency response"
    echo -e "${BLUE}• dbt Model Development${NC} - SQL model creation"
    echo -e "${BLUE}• Dagster Asset Creation${NC} - Orchestration assets"
    echo ""
    echo -e "${YELLOW}Access: Press Cmd+P in Warp and type workflow name${NC}"
}

# Aliases for workflow management
alias warp_import='warp_import_workflows'
alias warp_list='warp_list_workflows'

# Memory system functions
# ======================

# Quick memory stats
alias mem_stats='python3 ~/.warp/memory/memory_cli.py stats'

# Remember something important
mem_remember() {
    if [ $# -lt 2 ]; then
        echo "Usage: mem_remember <type> <content> [importance]"
        echo "Types: fact, pattern, preference, rule, context"
        echo "Example: mem_remember fact 'User prefers concise explanations' 0.8"
        return 1
    fi
    
    local type="$1"
    local content="$2"
    local importance="${3:-0.7}"
    
    python3 ~/.warp/memory/memory_cli.py remember "$type" "$content" --importance "$importance"
}

# Recall memories
mem_recall() {
    if [ $# -lt 1 ]; then
        echo "Usage: mem_recall <query> [limit]"
        echo "Example: mem_recall 'python file operations' 3"
        return 1
    fi
    
    local query="$1"
    local limit="${2:-5}"
    
    python3 ~/.warp/memory/memory_cli.py recall "$query" --limit "$limit"
}

# Search memory fragments
mem_search() {
    python3 ~/.warp/memory/memory_cli.py search "$@"
}

# Show conversation context
mem_context() {
    python3 ~/.warp/memory/memory_cli.py context
}

# Show/set preferences
mem_prefs() {
    if [ $# -eq 0 ]; then
        python3 ~/.warp/memory/memory_cli.py preferences
    elif [ $# -eq 2 ]; then
        python3 ~/.warp/memory/memory_cli.py preferences --set-key "$1" --set-value "$2"
    else
        echo "Usage: mem_prefs [key value]"
        echo "Example: mem_prefs coding_style 'pythonic'"
    fi
}

# Show recent conversations
mem_conversations() {
    python3 ~/.warp/memory/memory_cli.py conversations "$@"
}

# Export memory data
mem_export() {
    python3 ~/.warp/memory/memory_cli.py export "$@"
}

# Cleanup old data
mem_cleanup() {
    local days="${1:-30}"
    python3 ~/.warp/memory/memory_cli.py cleanup --days "$days"
}

# Memory aliases
alias ms='mem_stats'
alias mr='mem_remember'
alias mrc='mem_recall'
alias mx='mem_context'
alias mp='mem_prefs'

echo -e "${GREEN}🤖 AI Agent functions loaded!${NC}"
echo -e "${PURPLE}Available commands:${NC}"
echo -e "  ${CYAN}ads${NC}     - Start development session"
echo -e "  ${CYAN}atest${NC}   - Run test suite"
echo -e "  ${CYAN}aenv${NC}    - Setup environment"
echo -e "  ${CYAN}ahealth${NC} - Check service health"
echo -e "  ${CYAN}apr${NC}     - Create PR"
echo -e "  ${CYAN}aclean${NC}  - Cleanup caches"
echo -e "  ${CYAN}qi/qt/qf/qs/qd${NC} - Quick shortcuts"
echo -e "${BLUE}Memory System:${NC}"
echo -e "  ${CYAN}ms${NC}      - Memory stats"
echo -e "  ${CYAN}mr${NC}      - Remember something"
echo -e "  ${CYAN}mrc${NC}     - Recall memories"
echo -e "  ${CYAN}mx${NC}      - Show conversation context"
echo -e "  ${CYAN}mp${NC}      - Manage preferences"
