name: "PRP: API Contract Define"
description: "Create detailed API contract specification for backend/frontend coordination"
version: "1.0.0"
tags: ["prp", "ai", "spec", "api", "workflow-type"]

arguments:
  - name: "feature"
    description: "Feature to define API contract for"
    default_value: "${1}"

commands:
  - name: "define_api_contract"
    description: "Define API Contract Between Backend and Frontend"
    command: |
      echo "# Define API Contract Between Backend and Frontend"
      echo ""
      echo "Feature: ${1}"
      echo ""
      echo "## Task: Create detailed API contract specification for backend/frontend coordination"
      echo ""
      echo "1. **Define RESTful endpoints**:"
      echo ""
      echo '   ```yaml'
      echo "   Base URL: /api/v1/{feature}"
      echo ""
      echo "   Endpoints:"
      echo "   - GET /api/v1/{features}"
      echo "     Query params: page, size, sort, filter"
      echo "     Response: Page<{Feature}Response>"
      echo ""
      echo "   - GET /api/v1/{features}/{id}"
      echo "     Path param: id (Long)"
      echo "     Response: {Feature}Response"
      echo ""
      echo "   - POST /api/v1/{features}"
      echo "     Body: {Feature}Request"
      echo "     Response: {Feature}Response (201 Created)"
      echo ""
      echo "   - PUT /api/v1/{features}/{id}"
      echo "     Path param: id (Long)"
      echo "     Body: {Feature}Request"
      echo "     Response: {Feature}Response"
      echo ""
      echo "   - DELETE /api/v1/{features}/{id}"
      echo "     Path param: id (Long)"
      echo "     Response: 204 No Content"
      echo '   ```'
      echo ""
      echo "2. **Define request/response DTOs**:"
      echo ""
      echo '   ```typescript'
      echo "   // Request DTO (for POST/PUT)"
      echo "   interface {Feature}Request {"
      echo "     name: string;        // min: 2, max: 100"
      echo "     description?: string; // max: 1000"
      echo "     // Add domain-specific fields"
      echo "   }"
      echo ""
      echo "   // Response DTO (for GET)"
      echo "   interface {Feature}Response {"
      echo "     id: number;"
      echo "     name: string;"
      echo "     description?: string;"
      echo "     createdAt: string;   // ISO 8601"
      echo "     updatedAt: string;   // ISO 8601"
      echo "     // Add computed fields"
      echo "   }"
      echo ""
      echo "   // Page response wrapper"
      echo "   interface Page<T> {"
      echo "     content: T[];"
      echo "     totalElements: number;"
      echo "     totalPages: number;"
      echo "     size: number;"
      echo "     number: number;"
      echo "   }"
      echo '   ```'
      echo ""
      echo "3. **Define error responses**:"
      echo ""
      echo '   ```json'
      echo "   {"
      echo '     "timestamp": "2024-01-20T10:30:00Z",'
      echo '     "status": 400,'
      echo '     "error": "Bad Request",'
      echo '     "message": "Validation failed",'
      echo '     "path": "/api/v1/{features}",'
      echo '     "errors": ['
      echo "       {"
      echo '         "field": "name",'
      echo '         "message": "Name is required"'
      echo "       }"
      echo "     ]"
      echo "   }"
      echo '   ```'
      echo ""
      echo "4. **Define validation rules**:"
      echo "   - Backend: Bean Validation annotations"
      echo "   - Frontend: Matching Zod schemas"
      echo ""
      echo "   \`\`\`"
      echo "   name: required, 2-100 chars"
      echo "   description: optional, max 1000 chars"
      echo "   email: valid email format"
      echo "   date: ISO 8601 format"
      echo "   \`\`\`"
      echo ""
      echo "5. **Define status codes**:"
      echo "   - 200: OK (GET, PUT)"
      echo "   - 201: Created (POST)"
      echo "   - 204: No Content (DELETE)"
      echo "   - 400: Bad Request (validation)"
      echo "   - 404: Not Found"
      echo "   - 409: Conflict (duplicate)"
      echo "   - 500: Internal Server Error"
      echo ""
      echo "6. **Integration requirements**:"
      echo "   - CORS: Allow frontend origin"
      echo "   - Content-Type: application/json"
      echo "   - Authentication: Bearer token (if needed)"
      echo "   - Pagination: Spring Pageable format"
      echo "   - Sorting: field,direction (e.g., \"name,asc\")"
      echo ""
      echo "7. **Backend implementation notes**:"
      echo ""
      echo '   ```java'
      echo "   // Entity fields match response DTO"
      echo "   // Use MapStruct for DTO mapping"
      echo "   // Repository method naming conventions"
      echo "   // Service layer validation"
      echo '   ```'
      echo ""
      echo "8. **Frontend implementation notes**:"
      echo '   ```typescript'
      echo "   // Zod schemas match validation rules"
      echo "   // API client with base configuration"
      echo "   // TanStack Query hooks"
      echo "   // Error handling utilities"
      echo '   ```'
      echo ""
      echo "Save this contract as: \`PRPs/contracts/{feature}-api-contract.md\`"
      echo ""
      echo "Share this file between backend and frontend teams for alignment."

workflow:
  - define_api_contract
