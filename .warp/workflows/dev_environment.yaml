name: "Development Environment"
description: "Manage local development environment for data stack"
version: "1.0.0"

commands:
  - name: "start_services"
    description: "Start all required Docker services"
    command: |
      echo "🚀 Starting development services..."
      docker-compose up -d postgres redis
      echo "⏳ Waiting for services to be ready..."
      sleep 10
      docker-compose ps
      
  - name: "stop_services"
    description: "Stop all Docker services"
    command: |
      echo "🛑 Stopping development services..."
      docker-compose down
      
  - name: "restart_services"
    description: "Restart all Docker services"
    command: |
      echo "🔄 Restarting development services..."
      docker-compose down
      docker-compose up -d postgres redis
      sleep 10
      docker-compose ps
      
  - name: "setup_env"
    description: "Initialize development environment"
    command: |
      echo "🔧 Setting up development environment..."
      # Install Poetry dependencies
      poetry install --with dev,test,dagster,streamlit,mcp-server
      
      # Create necessary directories
      mkdir -p data/raw data/processed data/output
      mkdir -p logs reports
      
      # Copy example env files if they don't exist
      if [ ! -f .env ]; then
        cp .env.example .env 2>/dev/null || echo "# Environment variables" > .env
      fi
      
      echo "✅ Development environment ready!"
      
  - name: "reset_env"
    description: "Reset development environment (WARNING: destructive)"
    command: |
      echo "⚠️ Resetting development environment..."
      read -p "This will delete all data and logs. Continue? (y/N): " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v
        rm -rf data/processed/* data/output/* logs/* reports/*
        echo "🧹 Environment reset complete"
      else
        echo "❌ Reset cancelled"
      fi
      
  - name: "check_health"
    description: "Check health of all services"
    command: |
      echo "🩺 Checking service health..."
      
      # Check Docker services
      echo "📦 Docker services:"
      docker-compose ps
      
      # Check PostgreSQL connection
      echo "🐘 PostgreSQL connection:"
      poetry run python -c "
      import psycopg2
      try:
          conn = psycopg2.connect('postgresql://user:password@localhost:5432/freelancer_db')
          print('✅ PostgreSQL: Connected')
          conn.close()
      except Exception as e:
          print(f'❌ PostgreSQL: {e}')
      "
      
      # Check Redis connection
      echo "🔴 Redis connection:"
      poetry run python -c "
      import redis
      try:
          r = redis.Redis(host='localhost', port=6379, db=0)
          r.ping()
          print('✅ Redis: Connected')
      except Exception as e:
          print(f'❌ Redis: {e}')
      "
      
  - name: "view_logs"
    description: "View service logs"
    command: |
      echo "📋 Service logs:"
      docker-compose logs --tail=50 -f
      
  - name: "clean_cache"
    description: "Clean development caches and temporary files"
    command: |
      echo "🧹 Cleaning caches..."
      # Python cache
      find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
      find . -name "*.pyc" -delete 2>/dev/null || true
      
      # Poetry cache
      poetry cache clear --all pypi
      
      # dbt cache
      rm -rf transformation/dbt/dbt_packages transformation/dbt/logs transformation/dbt/target
      
      # Dagster cache
      rm -rf orchestration/dagster/tmp orchestration/dagster/storage
      
      echo "✅ Cache cleaned"

workflow_templates:
  full_setup:
    description: "Complete development environment setup"
    steps:
      - setup_env
      - start_services
      - check_health
      
  quick_restart:
    description: "Quick restart of services"
    steps:
      - restart_services
      - check_health
      
  maintenance:
    description: "Environment maintenance"
    steps:
      - clean_cache
      - check_health
