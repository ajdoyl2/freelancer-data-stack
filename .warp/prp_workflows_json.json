[
  {
    "name": "PRP - ${1:-Feature} Development",
    "description": "Complete pull request process for ${1:-feature} development with code review, testing, and deployment",
    "command": "echo 'üöÄ Pull Request Process: ${1:-Feature} Development\n\nüìã PRE-DEVELOPMENT CHECKLIST:\n1. Branch Management:\n   - Create feature branch: git checkout -b feature/${2:-feature-name}\n   - Ensure main branch is up-to-date\n   - Set up tracking: git push -u origin feature/${2:-feature-name}\n\n2. Development Environment:\n   - Verify dependencies: uv sync && uv --version\n   - Check dependency tree: uv tree\n   - Run tests: pytest ${3:-tests/}\n\n3. Code Quality Setup:\n   - Pre-commit hooks enabled\n   - Linting configuration verified\n   - Type checking enabled\n\nüîß DEVELOPMENT PHASE:\n1. Implementation:\n   - Follow SOLID principles (DIP, OCP compliance)\n   - Implement only needed features (YAGNI)\n   - Keep solutions simple and maintainable\n\n2. Data Stack Integration:\n   - Airflow DAG patterns with task decorators\n   - DuckDB for analytics (cost-effective choice)\n   - Meltano for data ingestion\n   - dbt core for transformations\n\n3. Testing Strategy:\n   - Unit tests for core logic\n   - Integration tests for data pipelines\n   - Pydantic AI agent compatibility\n\n‚úÖ PRE-COMMIT VALIDATION:\n1. Code Quality:\n   - Run linting and formatting\n   - Type checking passes\n   - Documentation updated\n\n2. Testing:\n   - All tests pass: pytest ${3:-tests/}\n   - Coverage meets requirements\n   - Performance benchmarks\n\n3. Data Pipeline Validation:\n   - dbt models compile: dbt compile\n   - dbt tests pass: dbt test\n   - Airflow DAG validation\n\nüîç PULL REQUEST CREATION:\n1. PR Description Template:\n   - Clear summary of changes\n   - Link to relevant issues\n   - Testing evidence\n   - Breaking changes noted\n\n2. Review Requirements:\n   - Code review checklist\n   - Architecture review if needed\n   - Security review for sensitive changes\n\nüìä MONITORING & VALIDATION:\n1. CI/CD Pipeline:\n   - All checks pass\n   - Performance metrics within limits\n   - $50/month cost target maintained\n\n2. Post-merge Validation:\n   - Services healthy\n   - Data quality maintained\n   - Agent integrations functional\n\nNext Steps: Review checklist and proceed with ${1:-feature} development'",
    "tags": ["prp", "pull-request", "development", "ci-cd", "quality", "airflow", "dbt"],
    "arguments": []
  },
  {
    "name": "PRP - Code Review",
    "description": "Comprehensive code review process with quality, security, and architecture validation",
    "command": "echo 'üîç Pull Request Code Review: ${1:-General Review}\n\nüìã REVIEW CHECKLIST:\n\n1. Code Quality & Style:\n   - PEP 8 compliance and type hints\n   - Clear variable/function naming\n   - Proper docstrings and comments\n   - Import organization\n\n2. Architecture & Design:\n   - SOLID principles adherence\n   - High-level modules don't depend on low-level modules\n   - Open/closed principle compliance\n   - Simple, maintainable solutions\n\n3. Data Stack Integration:\n   - Airflow DAG best practices (task decorators for 3.0)\n   - dbt model structure and testing\n   - DuckDB optimization patterns\n   - Meltano integration compliance\n\n4. Security & Best Practices:\n   - Input validation and sanitization\n   - Secrets management (no hardcoded values)\n   - Error handling and logging\n   - Resource management\n\n5. Testing & Documentation:\n   - Test coverage adequate (${2:-80%}+ target)\n   - Unit and integration tests\n   - API documentation updated\n   - README and inline docs current\n\n6. Performance & Cost:\n   - $50/month operational cost compliance\n   - Efficient resource usage\n   - Database query optimization\n   - Container allocation efficiency\n\n7. Agent Integration:\n   - Pydantic AI agent compatibility\n   - Structured responses for autonomous operation\n   - MCP server tool integration\n\nüéØ REVIEW FOCUS AREAS:\n- Business logic correctness\n- Data pipeline reliability\n- Error handling robustness\n- Scalability considerations\n\nüìù FEEDBACK TEMPLATE:\n‚úÖ Approved with minor suggestions\nüîÑ Needs changes before approval\n‚ùå Requires significant revision\n\nReview target: ${1:-General Review} | Coverage: ${2:-80%}+'",
    "tags": ["prp", "code-review", "quality", "security", "architecture", "testing"],
    "arguments": []
  },
  {
    "name": "PRP - Deployment Validation",
    "description": "Pre-deployment validation and post-deployment verification process",
    "command": "echo 'üöÄ Deployment Validation: ${1:-Production} Environment\n\nüîç PRE-DEPLOYMENT CHECKS:\n\n1. Environment Verification:\n   - Target environment: ${1:-production}\n   - Dependencies verified: uv sync && uv --version\n   - Configuration validated\n   - Secrets management verified\n\n2. Data Pipeline Validation:\n   - dbt models compile: dbt compile\n   - All tests pass: dbt test --select ${2:-all}\n   - Airflow DAG validation\n   - Database connectivity confirmed\n\n3. Performance Verification:\n   - Resource usage within limits\n   - $50/month cost target maintained\n   - Query performance acceptable\n   - Container allocation optimized\n\n4. Integration Testing:\n   - Service health checks\n   - API endpoint validation\n   - Data quality verification\n   - Agent integration tests\n\n‚úÖ DEPLOYMENT EXECUTION:\n1. Backup Strategy:\n   - Database backup completed\n   - Configuration backup\n   - Rollback plan prepared\n\n2. Deployment Process:\n   - Blue-green deployment if applicable\n   - Feature flags configured\n   - Monitoring alerts active\n\n3. Validation Steps:\n   - Service startup verification\n   - Health check endpoints\n   - Data pipeline execution\n   - User acceptance testing\n\nüìä POST-DEPLOYMENT MONITORING:\n1. System Health:\n   - All services running\n   - Error rates normal\n   - Performance metrics stable\n   - Resource utilization optimal\n\n2. Data Quality:\n   - Pipeline execution successful\n   - Data freshness validated\n   - Quality checks passing\n   - Downstream systems healthy\n\n3. User Impact:\n   - No service disruption\n   - Feature functionality confirmed\n   - Performance maintained\n   - Cost targets met\n\nüîß ROLLBACK PROCEDURES:\n- Immediate rollback triggers\n- Rollback execution steps\n- Communication plan\n- Post-rollback validation\n\nDeployment target: ${1:-production} | Test scope: ${2:-all}'",
    "tags": ["prp", "deployment", "validation", "monitoring", "production", "rollback"],
    "arguments": []
  },
  {
    "name": "PRP - Emergency Hotfix",
    "description": "Emergency hotfix process for production issues",
    "command": "echo 'üö® Emergency Hotfix Process: ${1:-Critical Issue}\n\n‚ö° IMMEDIATE RESPONSE:\n\n1. Impact Assessment:\n   - Issue: ${1:-Critical production issue}\n   - Severity: ${2:-High}\n   - Services affected: ${3:-Multiple}\n   - User impact assessment\n\n2. Rapid Stabilization:\n   - Immediate containment actions\n   - Service health verification\n   - Data integrity protection\n   - User communication initiated\n\n3. Quick Diagnostic:\n   - Error logs analysis\n   - Recent changes review\n   - Resource usage check\n   - Dependency validation\n\nüîß HOTFIX DEVELOPMENT:\n1. Minimal Code Changes:\n   - Hotfix branch: git checkout -b hotfix/${4:-issue-fix}\n   - Targeted fix only\n   - No feature additions\n   - Minimal testing scope\n\n2. Accelerated Testing:\n   - Critical path testing\n   - Regression prevention\n   - Performance impact check\n   - Data pipeline validation\n\n3. Fast-track Review:\n   - Security check mandatory\n   - Code quality essentials\n   - Architecture impact review\n   - Documentation updates\n\nüöÄ EMERGENCY DEPLOYMENT:\n1. Deployment Preparation:\n   - Backup current state\n   - Rollback plan ready\n   - Monitoring enhanced\n   - Team notification sent\n\n2. Deployment Execution:\n   - Staged rollout if possible\n   - Real-time monitoring\n   - Health checks active\n   - Performance tracking\n\n3. Post-deployment:\n   - Issue resolution verified\n   - System stability confirmed\n   - User impact resolved\n   - Monitoring continued\n\nüìã FOLLOW-UP ACTIONS:\n1. Root Cause Analysis:\n   - Detailed investigation\n   - Process improvement\n   - Prevention measures\n   - Documentation update\n\n2. Technical Debt:\n   - Proper fix planning\n   - Code quality improvement\n   - Test coverage enhancement\n   - Architecture review\n\nIssue: ${1:-Critical Issue} | Severity: ${2:-High} | Impact: ${3:-Multiple services}'",
    "tags": ["prp", "hotfix", "emergency", "production", "incident", "critical"],
    "arguments": []
  }
]
